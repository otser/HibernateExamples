<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!-- Generated 9 sept. 2014 10:41:35 by Hibernate Tools 3.6.0 -->
<hibernate-mapping package="net.viralpatel.hibernate.mtm.xml.extra1"  auto-import="false">
    <class name="Poste" table="poste" catalog="hibernate_examples">
        <id name="posteId" type="java.lang.Long">
            <column name="poste_id" />
            <generator class="identity" />
        </id>
        <property name="remBase" type="java.lang.Float">
            <column name="rem_base" precision="12" scale="0" />
        </property>
        <property name="categorie" type="java.lang.Character">
            <column name="categorie" length="1" />
        </property>
        <property name="description" type="string">
            <column name="description" length="50" />
        </property>
        
        
        <!--  
        cascade="all"
        -->
        
       <!--  <set name="employePostes" table="employe_poste" inverse="true" lazy="true" fetch="select" >
            <key>
                <column name="poste_id" not-null="true" />
            </key>
            <one-to-many class="EmployePoste" />
        </set> -->
        
        
        <!--
        This is an alternative for the many-to-many association to Item.
        We use a one-to-many association to express the relationship
        to a set of Employes. There is an intermediate entity class,
        EmployePoste, which effectively makes this a many-to-many
        association between Poste and Employe.

        You can use this mapping style if your association table has
        additional columns. These are then properties of the
        EmployePoste entity class.

        To create a link, instantiate a CategorizedItem with the right
        constructor. To remove a link, use getCategorizedItems().remove()
        on this class (mapped with orphan delete).
    -->
        <set  name="employePostes" cascade="all, delete-orphan" inverse="true" fetch="subselect">
	        <key column="POSTE_ID" not-null="true"/>
	        <one-to-many class="EmployePoste"/>
    	</set>
    
    </class>
</hibernate-mapping>
